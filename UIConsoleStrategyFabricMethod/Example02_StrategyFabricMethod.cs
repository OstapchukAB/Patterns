namespace TextTransformationAntiPattern;
#region Начальные условия
/*
Тема: Преобразование текста

Исходные требования (антипаттерн):

    Программа читает строку от пользователя.
    Программа предлагает выбрать тип преобразования:
        Преобразовать в верхний регистр.
        Преобразовать в нижний регистр.
        Реверсировать строку.
    На основании выбранного типа преобразования выполняется нужная операция с помощью условных операторов внутри одного метода.

Задача:

    Рефакторинг: Перепиши исходный код, используя паттерны:
        Стратегия: Для каждого типа преобразования создай отдельную стратегию (класс), реализующую общий интерфейс.
        Фабричный метод: Создай фабрику (либо абстрактного создателя, либо простую статическую фабрику),
которая будет возвращать нужную стратегию на основании выбранного типа преобразования.

    Контекст: Реализуй класс-контекст, который будет принимать стратегию и делегировать ей выполнение преобразования текста.

    Демонстрация работы: В методе Main запроси у пользователя строку и тип преобразования, 
затем используй фабрику для создания стратегии, передай её в контекст и выведи результат.
 */
#endregion
#region Что нужно сделать
/*
 Твоя задача:

    Реализуй интерфейс стратегии (например, ITextTransformationStrategy) с методом для преобразования текста.

    Создай конкретные стратегии:
        UpperCaseStrategy – преобразует строку в верхний регистр.
        LowerCaseStrategy – преобразует строку в нижний регистр.
        ReverseStringStrategy – переворачивает строку (реверс).

    Реализуй фабрику (например, класс TextTransformationStrategyFactory),
которая по входящему типу (например, строке "upper", "lower", "reverse") возвращает нужную стратегию.

    Создай класс-контекст (например, TextTransformer), который принимает стратегию (через конструктор или метод) и делегирует ей выполнение преобразования.

    В методе Main:
        Запроси у пользователя исходную строку и тип преобразования.
        Используй фабрику для создания соответствующей стратегии.
        Передай стратегию в контекст и получи преобразованный текст.
        Выведи результат в консоль.
 */
#endregion
class Program
{
    /// <summary>
    /// Процедурный метод, выполняющий преобразование текста.
    /// В зависимости от типа преобразования (upper, lower, reverse)
    /// используется цепочка if-else.
    /// </summary>
    /// <param name="text">Исходная строка</param>
    /// <param name="transformType">Тип преобразования</param>
    /// <returns>Преобразованная строка</returns>
    static string TransformText(string text, string transformType)
    {
        if (transformType == "upper")
        {
            return text.ToUpper();
        }
        else if (transformType == "lower")
        {
            return text.ToLower();
        }
        else if (transformType == "reverse")
        {
            char[] arr = text.ToCharArray();
            Array.Reverse(arr);
            return new string(arr);
        }
        else
        {
            throw new ArgumentException("Неподдерживаемый тип преобразования");
        }
    }

    static void Main(string[] args)
    {
        Console.WriteLine("Введите строку для преобразования:");
        string input = Console.ReadLine();

        Console.WriteLine("Выберите тип преобразования (upper, lower, reverse):");
        string type = Console.ReadLine();

        string result = TransformText(input, type);
        Console.WriteLine("Результат: " + result);
    }
}
